// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  COMPANY
  ADMIN
}

enum TicketStatus {
  RESERVED
  PAID
  CANCELLED
  USED
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
  FAILED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PIX
  BOLETO
}

enum TransportType {
  BUS
  BOAT
  FERRY
}

enum CompanyStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id           String   @id @default(uuid())
  companyId    String? // ID da empresa (pode ser nulo para clientes)
  name         String
  email        String   @unique
  passwordHash String
  cpf          String?  @unique
  phone        String?
  role         UserRole @default(CUSTOMER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  company Company?  @relation(fields: [companyId], references: [id], onDelete: SetNull)
  tickets Ticket[]
  Payment Payment[]
}

model Company {
  id              String        @id @default(uuid())
  tradingName     String?
  legalName       String?
  cnpj            String        @unique
  email           String        @unique
  phone           String?
  address         String?
  status          CompanyStatus @default(PENDING)
  approvedAt      DateTime?
  rejectedAt      DateTime?
  rejectionReason String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  routes          Route[]
  User            User[]

  @@map("Company")
}

model Route {
  id                 String         @id @default(uuid())
  companyId          String
  origin             String
  originState        String?
  originCountry      String
  originType         String
  destination        String
  destinationState   String?
  destinationCountry String
  destinationType    String
  departureTime      DateTime
  arrivalTime        DateTime
  price              Float
  type               String
  totalSeats         Int
  active             Boolean        @default(true)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  company            Company        @relation(fields: [companyId], references: [id])
  Ticket             Ticket[]
  routeAmenities     RouteAmenity[]

  @@map("Route")
}

model Ticket {
  id           String       @id @default(uuid())
  routeId      String
  userId       String
  status       TicketStatus @default(RESERVED)
  ticketCode   String       @unique
  passenger    String
  passengerCpf String
  seatNumber   String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  paymentId    String? // Novo campo para relacionamento com Payment

  route   Route    @relation(fields: [routeId], references: [id])
  user    User     @relation(fields: [userId], references: [id])
  payment Payment? @relation(fields: [paymentId], references: [id])
}

model Payment {
  id         String        @id @default(uuid())
  userId     String // Adicionado campo de usuário
  status     PaymentStatus @default(PENDING)
  method     PaymentMethod
  amount     Decimal       @db.Decimal(10, 2)
  externalId String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  tickets Ticket[] // Relação com múltiplos tickets
  user    User     @relation(fields: [userId], references: [id])
}

model Amenity {
  id             String         @id @default(uuid())
  name           String         @unique
  icon           String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  routeAmenities RouteAmenity[]

  @@map("Amenity")
}

model RouteAmenity {
  routeId   String
  amenityId String
  route     Route   @relation(fields: [routeId], references: [id], onDelete: Cascade)
  amenity   Amenity @relation(fields: [amenityId], references: [id], onDelete: Cascade)

  @@id([routeId, amenityId])
  @@map("route_amenity")
}
